rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* Helpers */
    function isSignedIn() { return request.auth != null; }
    function isAdmin() {
      return isSignedIn()
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.user_role == "admin";
    }

    /* Public CMS content */
    match /page_content/{doc} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    /* Users (unchanged, conservative) */
    match /users/{uid} {
      allow read: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update, delete: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
    }

    /* Registrations â€” guest create + public GET */
    match /registrations/{id} {
      // Minimal fields required for a create
      function hasRequired() {
        return request.resource.data.keys().hasAll([
          'name','email','registration_product_id','attendee_type',
          'amount','currency','payment_required','payment_status','review_status'
        ]);
      }

      // Guests can create if required fields are present
      allow create: if hasRequired();

      // Public can fetch a single registration (success page)
      allow get: if true;

      // Only admins can list or mutate after creation
      allow list, update, delete: if isAdmin();
    }

    /* Outbound email queue (Trigger Email from Firestore extension) */
    match /mail/{docId} {
      // Accepts: { to, (optional from/cc/bcc/replyTo/headers/createdAt), message:{subject, text?, html?} }
      allow create: if (
        // must have 'to' and 'message'
        request.resource.data.keys().hasAll(['to','message']) &&

        // 'to' can be a string or a non-empty list of strings
        (
          (request.resource.data.to is string && request.resource.data.to.size() > 0) ||
          (request.resource.data.to is list &&
           request.resource.data.to.size() > 0 &&
           request.resource.data.to.where(x, x is string && x.size() > 0).size() == request.resource.data.to.size())
        ) &&

        // message must be a map containing a non-empty subject and at least one body (text or html)
        (request.resource.data.message is map) &&
        (request.resource.data.message.subject is string && request.resource.data.message.subject.size() > 0) &&
        (
          (('text' in request.resource.data.message) && (request.resource.data.message.text is string)) ||
          (('html' in request.resource.data.message) && (request.resource.data.message.html is string))
        ) &&

        // Optional: from
        (!('from' in request.resource.data) ||
          (request.resource.data.from is string && request.resource.data.from.size() > 0)
        ) &&

        // Optional: replyTo (string or list of strings)
        (!('replyTo' in request.resource.data) ||
          (request.resource.data.replyTo is string && request.resource.data.replyTo.size() > 0) ||
          (request.resource.data.replyTo is list &&
           request.resource.data.replyTo.size() > 0 &&
           request.resource.data.replyTo.where(x, x is string && x.size() > 0).size() == request.resource.data.replyTo.size())
        ) &&

        // Optional: cc/bcc (lists of strings)
        (!('cc' in request.resource.data) ||
          (request.resource.data.cc is list &&
           request.resource.data.cc.where(x, x is string && x.size() > 0).size() == request.resource.data.cc.size())
        ) &&
        (!('bcc' in request.resource.data) ||
          (request.resource.data.bcc is list &&
           request.resource.data.bcc.where(x, x is string && x.size() > 0).size() == request.resource.data.bcc.size())
        ) &&

        // Optional: headers (map)
        (!('headers' in request.resource.data) || (request.resource.data.headers is map))
      ) || isAdmin(); // admins can always enqueue

      // Only admins can read/update/delete queued mail docs
      allow read, update, delete: if isAdmin();
    }

    /* Deny everything else */
    match /{document=**} { allow read, write: if false; }
  }
}
